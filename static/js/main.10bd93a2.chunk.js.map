{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priotityTitle","priority","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","createTask","newTaskTitle","todolistId","post","createTodolist","getTodolists","get","updateTask","put","deleteTodolist","delete","getTasks","updateTodolistTitle","ADD_TODOLIST","DELETE_TODOLIST","DELETE_TASK","ADD_TASK","SET_TASKS","UPDATE_TASK","SET_TODOLISTS","initialState","getTodolistsTC","dispatch","getState","then","res","todolists","data","getTasksTC","allTasks","items","setTasksAC","createTaskTC","newTask","item","addTaskAC","deleteTodolistTC","deleteTodolistAC","addTodolistTC","todolist","newTodolist","deleteTaskTC","taskId","deleteTaskAC","reducer","action","tl","filter","t","obj","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","addTask","newFilterValue","changeTask","forEach","newTasksTitileRef","createRef","this","ConnectedTodolist","connect","thunk","updateTaskAC","updateTodolistTitleAC","App","nextTodoListId","addTodoList","addTodolist","___restoreState","getItem","parse","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10bd93a2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status == 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: {priotityTitle} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(\n            task => <TodoListTask task={task}\n                                  changeStatus={this.props.changeStatus}\n                                  changeTitle={this.props.changeTitle}\n                                  deleteTask={this.props.deleteTask}\n            />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    render = () => {\n        return (\n            <>\n            {\n                this.state.editMode\n                    ? <input value={this.state.title} autoFocus={true}\n                             onBlur={this.deactivateEditMode}\n                             onChange={this.onTitleChanged}/>\n                    : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}\n                        <button onClick={this.props.onDelete}>X</button>\n                    </h3>\n            }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    }\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,                                       // передавай с запросом куки для запрашиваемого домена\r\n    headers: {\"API-KEY\": '3eb442be-c6ec-48c8-96fc-69807a29300c'} // специальный ключ в заголовках передаём\r\n});\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n    },\r\n    updateTask(task) {\r\n        return instance.put(`/tasks`,  task);\r\n    },\r\n    deleteTodolist(id) {\r\n        return instance.delete(\"/\" + id)\r\n    },\r\n    deleteTask(id) {\r\n        return instance.delete(`/tasks/${id}`)\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\n\r\nconst initialState = {\r\n    \"todolists\": [\r\n        // {\r\n        //     \"id\": 0, \"title\": \"every day\",\r\n        //     tasks: [\r\n        //         {\"title\": \"css11\", \"isDone\": false, \"priority\": \"low\", \"id\": 0},\r\n        //         {\"title\": \"js\", \"isDone\": false, \"priority\": \"low\", \"id\": 1},\r\n        //         {\"title\": \"react\", \"isDone\": false, \"priority\": \"low\", \"id\": 2},\r\n        //         {\"title\": \"sasasa\", \"isDone\": false, \"priority\": \"low\", \"id\": 3},\r\n        //         {\"title\": \"yoaa\", \"isDone\": false, \"priority\": \"low\", \"id\": 4},\r\n        //         {\"title\": \"sddsdsds\", \"isDone\": false, \"priority\": \"low\", \"id\": 5}]\r\n        // },\r\n        // {\"id\": 1, \"title\": \"tomorrow\", tasks: []},\r\n        // {\"id\": 2, \"title\": \"weewwe`\", tasks: []},\r\n        // {\"id\": 3, \"title\": \"dddd\", tasks: []}\r\n    ]\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id != action.todolistId)\r\n            }\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id != action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id != action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id != action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n}\r\n\r\n\r\nexport const updateTaskAC = (taskId, obj, todolistId) => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};}\r\n\r\nexport const deleteTodolistAC = (todolistId) => {\r\n    return {\r\n        type: DELETE_TODOLIST,\r\n        todolistId: todolistId\r\n    };}\r\n\r\nexport const deleteTaskAC = (taskId, todolistId) => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        todolistId,\r\n        taskId\r\n    };\r\n}\r\nexport const updateTodolistTitleAC = (todolistId, title) => {\r\n    return {\r\n        type: UPDATE_TODOLIST_TITLE,\r\n        todolistId,\r\n        title\r\n    };}\r\n\r\nexport const addTodolistAC = (newTodolist) => {\r\n    return {\r\n        type: ADD_TODOLIST,\r\n        newTodolist: newTodolist}};\r\n\r\nconst addTaskAC = (newTask, todolistId) => {\r\n    return {type: ADD_TASK, newTask, todolistId};}\r\n\r\nconst setTasksAC = (tasks, todolistId) => {\r\n    return {type: SET_TASKS, tasks, todolistId};}\r\n\r\nconst setTodolistsAC = (todolists) => {\r\n    return {\r\n        type: SET_TODOLISTS,\r\n        todolists: todolists\r\n    }\r\n}\r\n\r\nexport const getTodolistsTC = () => (dispatch, getState) => {\r\n    api.getTodolists().then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })}\r\n\r\nexport const getTasksTC = (todolistId) => (dispatch, getState) => {\r\n    api.getTasks(todolistId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;  // items - это таски сервака\r\n            dispatch(setTasksAC(allTasks, todolistId));\r\n        });};\r\n\r\nexport const createTaskTC = (newText, todolistId) => (dispatch, getState) => {\r\n    api.createTask(newText, todolistId).then(res => {\r\n        let newTask = res.data.data.item;\r\n        dispatch(addTaskAC(newTask, todolistId));\r\n    });};\r\n\r\nexport const deleteTodolistTC = (todolistId) => (dispatch, getState) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        })}\r\n\r\nexport const addTodolistTC = (title) => (dispatch, getState) => {\r\n    api.createTodolist(title).then(res => {\r\n        let todolist = res.data.data.item;\r\n        dispatch(addTodolistAC(todolist))\r\n    })}\r\n\r\nexport const deleteTaskTC = (taskId, todolistId)=> (dispatch, getState)=> {\r\n    api.deleteTask(taskId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });}\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    createTaskTC, deleteTaskTC, deleteTodolistTC, getTasksTC,\n    updateTaskAC, updateTodolistTitleAC\n\n} from \"./reducer\";\nimport {api} from \"./api\";\n\n\nclass TodoList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newTasksTitileRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.getTasks(this.props.id)\n    }\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText) => {\n        this.props.createTask(newText, this.props.id)\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    }\n\n    changeTask = (taskId, obj) => {\n\n        this.props.tasks.forEach(t => {\n            if (t.id === taskId) {\n                api.updateTask({...t, ...obj})\n                    .then(res => {\n                        this.props.updateTask(taskId, obj, this.props.id);\n                    });\n            }\n        })\n    }\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    }\n\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id)}\n\n    deleteTask = (taskId) => {\n       this.props.deleteTask(taskId, this.props.id)\n    }\n\n    updateTitle = (title) => {\n        api.updateTodolistTitle(title, this.props.id)\n            .then(res => {\n                this.props.updateTodolistTitle(title, this.props.id);\n            });\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist}\n                                   updateTitle={this.updateTitle}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                    /*tasks={this.props.tasks.filter(t => {*/\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.isDone === false;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.isDone === true;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getTasks(tasks, todolistId) {\n            dispatch(getTasksTC(tasks, todolistId));\n        },\n        createTask: (newText, todolistId) => {\n            const thunk = createTaskTC(newText, todolistId);\n            dispatch(thunk)\n        },\n        deleteTodolist: (todolistId) => {\n            const thunk = deleteTodolistTC(todolistId);\n            dispatch(thunk)\n        },\n        deleteTask: (taskId, todolistId) => {\n            const action = deleteTaskTC(taskId, todolistId);\n            dispatch(action)\n        },\n\n\n        updateTask(taskId, obj, todolistId) {\n            const action = updateTaskAC(taskId, obj, todolistId);\n            dispatch(action);\n        },\n        updateTodolistTitle: (title, todolistId) => {\n            const action = updateTodolistTitleAC(todolistId, title);\n            dispatch(action)\n        },\n    }\n}\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {ADD_TODOLIST, addTodolistAC, addTodolistTC, getTodolistsTC, setTodolistsAC} from \"./reducer\";\nimport {api} from \"./api\";\n\nclass App extends React.Component {\n\n    nextTodoListId = 0;\n\n    state = {\n        todolists: []\n    }\n\n    addTodoList = (title) => {\n                this.props.addTodolist(title);\n    }\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"todolists-state\", stateAsString);\n    }\n\n    restoreState = () => {\n        this.props.getTodolists()\n    }\n    ___restoreState = () => {\n        // объявляем наш стейт стартовый\n        let state = this.state;\n        // считываем сохранённую ранее строку из localStorage\n        let stateAsString = localStorage.getItem(\"todolists-state\");\n        // а вдруг ещё не было ни одного сохранения?? тогда будет null.\n        // если не null, тогда превращаем строку в объект\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        // устанавливаем стейт (либо пустой, либо восстановленный) в стейт\n        this.setState(state, () => {\n            this.state.todolists.forEach(t => {\n                if (t.id >= this.nextTodoListId) {\n                    this.nextTodoListId = t.id + 1;\n                }\n            })\n        });\n    }\n\n    render = () => {\n        const todolists = this.props.todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>)\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        // setTodolists: (todolists) => {\n        //     const action = setTodolistsAC(todolists);\n        //     dispatch(action)\n        // },\n        addTodolist: (title) => {\n            const thunk = addTodolistTC(title);\n            dispatch(thunk)\n        },\n        getTodolists: () => {\n            const thunk = getTodolistsTC();\n            dispatch(thunk)\n        }\n    }\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}