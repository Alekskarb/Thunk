{"version":3,"sources":["TodoListTask.js","TodoListTasks.js","TodoListFooter.js","TodoListTitle.js","AddNewItemForm.js","api.js","reducer.js","TodoList.js","App.js","serviceWorker.js","store.js","index.js"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priotityTitle","priority","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","updateTitle","onDelete","AddNewItemForm","error","onAddItemClick","newText","addItem","onKeyPress","key","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","newTaskTitle","todolistId","post","get","taskId","put","delete","ADD_TODOLIST","DELETE_TODOLIST","DELETE_TASK","ADD_TASK","SET_TASKS","UPDATE_TASK","initialState","getTasksTC","dispatch","getState","then","res","allTasks","data","items","setTasksAC","createTaskTC","newTask","item","addTaskAC","deleteTodolistTC","deleteTodolistAC","deleteTaskTC","deleteTaskAC","updateTaskTC","obj","updateTaskAC","reducer","action","todolists","tl","newTodolist","filter","t","TodoList","restoreState","getTasks","addTask","newFilterValue","saveState","changeTask","changedTask","find","updateTask","deleteTodolist","updateTodolistTitle","this","connect","updateTodolistTitleAC","updateTodolistTitleTC","App","nextTodoListId","addTodoList","addTodolistTC","getTodolistsTC","ConnectedApp","todolist","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.987c6937.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass TodoListTask extends React.Component {\n\n    onIsDoneChanged = (e) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    }\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    }\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    }\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode= () => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    }\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    }\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0: priotityTitle = \"Low\"; break;\n            case 1: priotityTitle = \"Middle\"; break;\n            case 2: priotityTitle = \"High\"; break;\n            case 3: priotityTitle = \"Urgently\"; break;\n            case 4: priotityTitle = \"Later\"; break;\n        }\n        return (\n                <div className={containerCssClass}>\n                    <input type=\"checkbox\" checked={this.props.task.status == 2}\n                           onChange={this.onIsDoneChanged}/>\n                    { this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title} />\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, priority: {priotityTitle} <button onClick={this.onDeleteTask}>X</button>\n                </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n\n        let tasksElements = this.props.tasks.map(\n            task => <TodoListTask task={task}\n                                  changeStatus={this.props.changeStatus}\n                                  changeTitle={this.props.changeTitle}\n                                  deleteTask={this.props.deleteTask}\n            />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\nclass TodoListFooter extends React.Component {\n\n    state = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\"); }\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\"); }\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\"); }\n    onShowFiltersClick = () => { this.setState({isHidden: true}) }\n    onHideFiltersClick = () => { this.setState({isHidden: false}) }\n\n    render = (props) => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\nimport './App.css';\n\nclass TodoListTitle extends React.Component {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTitle(this.state.title);\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    };\n\n    render = () => {\n        return (\n            <>\n                {\n                    this.state.editMode\n                        ? <input value={this.state.title} autoFocus={true}\n                                 onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}/>\n                        : <h3 className=\"todoList-header__title\" onClick={this.activateEditMode}>{this.props.title}\n                            <button onClick={this.props.onDelete}>X</button>\n                        </h3>\n                }\n            </>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React from 'react';\nimport './App.css';\n\nclass AddNewItemForm extends React.Component {\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}\n                />\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": '3eb442be-c6ec-48c8-96fc-69807a29300c'} // специальный ключ в заголовках передаём\r\n});// передавай с запросом куки для запрашиваемого домена\r\n\r\nexport const api = {\r\n    createTask(newTaskTitle, todolistId) {\r\n        return instance.post(`/${todolistId}/tasks`, {title: newTaskTitle});\r\n    },\r\n    createTodolist(title) {\r\n        return instance.post(\"\", {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get(\"\");\r\n    },\r\n    updateTask(taskId, todolistId, task) {\r\n        return instance.put(`/${todolistId}/tasks/${taskId}`, task);\r\n    },\r\n    deleteTodolist(id) {\r\n        return instance.delete(\"/\" + id)\r\n    },\r\n    deleteTask(todolistId, taskId) {\r\n        return instance.delete(`/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    getTasks(todolistId) {\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    updateTodolistTitle(title, todolistId) {\r\n        return instance.put(`/${todolistId}`, {title: title})\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n","import {api} from \"./api\";\r\n\r\nexport const ADD_TODOLIST = \"App/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const UPDATE_TODOLIST_TITLE = \"TodoList/Reducer/UPDATE_TODOLIST_TITLE\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"App/Reducer/SET_TODOLISTS\";\r\n\r\nconst initialState = {\r\n    \"todolists\": []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            }\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            }\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            }\r\n        case UPDATE_TODOLIST_TITLE:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) return tl;\r\n                    else return {...tl, title: action.title}\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action creators\r\nconst updateTaskAC = (taskId, obj, todolistId) => ({type: UPDATE_TASK, taskId, obj, todolistId});\r\nconst deleteTodolistAC = (todolistId) => ({type: DELETE_TODOLIST, todolistId: todolistId});\r\nconst deleteTaskAC = (taskId, todolistId) => ({type: DELETE_TASK, todolistId, taskId});\r\nconst updateTodolistTitleAC = (title, todolistId) => ({type: UPDATE_TODOLIST_TITLE, todolistId, title});\r\nconst addTodolistAC = (newTodolist) => ({type: ADD_TODOLIST, newTodolist: newTodolist});\r\nconst addTaskAC = (newTask, todolistId) => ({type: ADD_TASK, newTask, todolistId});\r\nconst setTasksAC = (tasks, todolistId) => ({type: SET_TASKS, tasks, todolistId});\r\nconst setTodolistsAC = (todolists) => ({type: SET_TODOLISTS, todolists: todolists});\r\n\r\n// Thunk creators\r\nexport const getTodolistsTC = () => (dispatch, getState) => {\r\n//to API, dispatch action\r\n    api.getTodolists().then(res => {\r\n        dispatch(setTodolistsAC(res.data))\r\n    })\r\n};\r\nexport const getTasksTC = (todolistId) => (dispatch, getState) => {\r\n    api.getTasks(todolistId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, todolistId));\r\n        });\r\n};\r\nexport const createTaskTC = (newText, todolistId) => (dispatch) => {\r\n    api.createTask(newText, todolistId).then(res => {\r\n        let newTask = res.data.data.item;\r\n        dispatch(addTaskAC(newTask, todolistId));\r\n    });\r\n};\r\nexport const deleteTodolistTC = (todolistId) => (dispatch) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        })\r\n};\r\nexport const addTodolistTC = (title) => (dispatch, getState) => {\r\n    api.createTodolist(title).then(res => {\r\n        let todolist = res.data.data.item;\r\n        dispatch(addTodolistAC(todolist))\r\n    })\r\n};\r\nexport const deleteTaskTC = (taskId, todolistId) => (dispatch, getState) => {\r\n    api.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });\r\n};\r\nexport const updateTaskTC = (taskId, todolistId, task, obj) => (dispatch) => {\r\n    // getState().todolists.find(td => td.id === todolistId)\r\n    //     .tasks.forEach(t => {\r\n    //     if (t.id === taskId) {\r\n    api.updateTask(taskId, todolistId, task)\r\n        .then(res => {\r\n            dispatch(updateTaskAC(taskId, obj, todolistId));\r\n        });\r\n};\r\n\r\nexport const updateTodolistTitleTC = (title, todolistId) => (dispatch, getState) => {\r\n    api.updateTodolistTitle(title, todolistId)\r\n        .then(res => {\r\n            dispatch(updateTodolistTitleAC(title, todolistId));\r\n        });\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    createTaskTC, deleteTaskTC, deleteTodolistTC, getTasksTC,\n    updateTaskTC, updateTodolistTitleTC\n} from \"./reducer\";\n\nclass TodoList extends React.Component {\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTasks(this.props.id)\n    };\n\n    addTask = (newText) => {\n        this.props.addTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue) => {\n        this.setState({\n            filterValue: newFilterValue\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    changeTask = (taskId, obj) => {\n        let changedTask = this.props.tasks.find(task => {   //see destruction expression stroke #67\n            return task.id === taskId\n        });\n        let task = {...changedTask, ...obj};\n        this.props.updateTask(taskId, this.props.id, task, obj);\n    };\n\n    changeStatus = (taskId, status) => {\n        this.changeTask(taskId, {status: status});\n    };\n    changeTitle = (taskId, title) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTodolist(this.props.id)\n    };\n\n    deleteTask = (taskId) => {\n        this.props.deleteTask(taskId, this.props.id)\n    };\n\n    updateTitle = (title) => {\n        this.props.updateTodolistTitle(title, this.props.id)\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;  //see changeTask stroke #40\n        return (\n            <div className=\"todoList\">\n                <div className=\"todoList-header\">\n                    <TodoListTitle title={this.props.title} onDelete={this.deleteTodolist}\n                                   updateTitle={this.updateTitle}/>\n                    <AddNewItemForm addItem={this.addTask}/>\n\n                </div>\n\n                <TodoListTasks changeStatus={this.changeStatus}\n                               changeTitle={this.changeTitle}\n                               deleteTask={this.deleteTask}\n                    /*tasks={this.props.tasks.filter(t => {*/\n                               tasks={tasks.filter(t => {\n                                   if (this.state.filterValue === \"All\") {\n                                       return true;\n                                   }\n                                   if (this.state.filterValue === \"Active\") {\n                                       return t.isDone === false;\n                                   }\n                                   if (this.state.filterValue === \"Completed\") {\n                                       return t.isDone === true;\n                                   }\n                               })}/>\n                <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getTasks(tasks, todolistId) {\n            dispatch(getTasksTC(tasks, todolistId));\n        },\n        addTask: (newText, todolistId) => {\n            dispatch(createTaskTC(newText, todolistId));\n        },\n        deleteTodolist: (todolistId) => {\n            dispatch(deleteTodolistTC(todolistId));\n        },\n        deleteTask: (taskId, todolistId) => {\n            dispatch(deleteTaskTC(taskId, todolistId))\n        },\n        updateTask(taskId, todolistId, task, obj) {\n            dispatch(updateTaskTC(taskId, todolistId, task, obj));\n        },\n        updateTodolistTitle: (title, todolistId) => {\n            dispatch(updateTodolistTitleTC(title, todolistId));\n        },\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(TodoList);\n\n\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolistTC, getTodolistsTC} from \"./reducer\";\n\nclass App extends React.Component {\n\n    nextTodoListId = 0;\n\n    state = {\n        todolists: []\n    };\n\n    addTodoList = (title) => {\n        this.props.addTodolistTC(title);\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n    restoreState = () => {\n        this.props.getTodolistsTC()\n    };\n\n    render = () => {\n        const todolists = this.props.todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id}\n                                 title={tl.title} tasks={tl.tasks}/>);\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        todolists: state.todolists\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, {addTodolistTC, getTodolistsTC})(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(reducer,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}